# ////////////////////////////////////////////////////////////////////////////
# 数据库连接
# ////////////////////////////////////////////////////////////////////////////

# 数据库连接信息
driver=org.postgresql.Driver
conn=jdbc:postgresql://localhost:5432/tpccdb?reWriteBatchedInserts=true
user=postgres
password=postgres
schema=
# 建库建schema建表建索引的SQL文件, 这些SQL里的schema要跟schema参数保持一致
schemaSql=tpcc-pg12wh1-schema.sql

# ////////////////////////////////////////////////////////////////////////////
# 数据生成
# ////////////////////////////////////////////////////////////////////////////

# TPC-C:
# 每个仓库负责十个区域的供货，每个区域 3000 个客户服务，
# 每个仓库维护 100000 种商品的库存纪录，
# 每个仓库至多有10个终端

# 仓库数量
warehouses=1

# 每个仓库终端数量
terminals=10

# 是否生成数据文件, true: 生成数据文件然后调用dataSql参数执行导入, false: 直接生成数据然后insert到数据库
generateDataFile=true
# 将生成的数据导入到数据库的SQL文件
dataSql=tpcc-pg12wh1-data.sql

# ////////////////////////////////////////////////////////////////////////////
# 数据查询
# ////////////////////////////////////////////////////////////////////////////

# To run specified transactions per terminal - runMins must equal zero
# 每个终端执行多少交易.
runTxnsPerTerminal=0

# To run for specified minutes - runTxnsPerTerminal must equal zero
# 每个终端持续执行交易多少分钟.
runMins=1

# Number of total transactions per minute
# 每分钟最多执行多少交易??
limitTxnsPerMin=0

# 事务权重
# 5种事务: 新订单（New-Order）、支付操作(Payment)、订单状态查询(Order-Status)、发货(Delivery)、库存状态查询(Stock-Level)
# The following five values must add up to 100
# The default percentages of 45, 43, 4, 4 & 4 match the TPC-C spec
# 下面5个配置项得值之和要等于100, 用于分配不同操作的百分比, 从而可以更灵活的模拟正式负载。
newOrderWeight=45
paymentWeight=43
orderStatusWeight=4
deliveryWeight=4
stockLevelWeight=4
